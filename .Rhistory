set.seed(1)
x = matrix(rnorm(100 * 20), 100, 20)
beta = c(5,4,3,2,1,rep(0, times = 15))
y = x%*%beta + rnorm(100)
gindex = sort(rep(1:4,times=5))
fit=tscv.sglfit(x = x, y = y, gindex = gindex, gamma = 0.5,
standardize = FALSE, intercept = FALSE)
library(midasml)
set.seed(1)
x = matrix(rnorm(100 * 20), 100, 20)
beta = c(5,4,3,2,1,rep(0, times = 15))
y = x%*%beta + rnorm(100)
gindex = sort(rep(1:4,times=5))
fit=tscv.sglfit(x = x, y = y, gindex = gindex, gamma = 0.5,
standardize = FALSE, intercept = FALSE)
fit$cvm
library(midasml)
set.seed(1)
x = matrix(rnorm(100 * 20), 100, 20)
beta = c(5,4,3,2,1,rep(0, times = 15))
y = x%*%beta + rnorm(100)
gindex = sort(rep(1:4,times=5))
fit = tscv.sglfit(x = x, y = y, gindex = gindex, gamma = 0.5,
standardize = FALSE, intercept = FALSE,
K = 5, l = 3)
fit$cv.fit
rm(list=ls())
# ------- SET WORKING DIRECTORY ------- #
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(wd)
require(ggplot2)
x <- NULL
#x <- dlstats::cran_stats(c("bootml"))
if (!is.null(x)) {
head(x)
p <- ggplot2::ggplot(x, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))
p <- plotly::ggplotly(p)
p
}
#-------------- package stuff ------#
remove.packages("bootml")
# delete current compiled version
unlink(list.files(pattern = ".tar.gz"))
unlink("bootml.Rcheck", recursive = TRUE)
unlink("bootml", recursive = TRUE)
# delete previous version
unlink(paste0(wd,"/bootml"), recursive = TRUE)
# create skeleton
package.skeleton(name="bootml",
code_files = c("R/factorsparsetest.R","R/fitboot.R","R/fitbootlocal.R",
"R/utilities.R", "R/bootml-package.R"))
unlink("bootml/man", recursive = TRUE)
dir.create("bootml/man")
dir.create("bootml/src")
# copy Fortran files:
file.copy("src/auxiliary.f90", "bootml/src/auxiliary.f90")
file.copy("src/maxlambda.f90", "bootml/src/maxlambda.f90")
file.copy("src/fitnoiseF.f90", "bootml/src/fitnoiseF.f90")
file.copy("src/bootml_init.c", "bootml/src/bootml_init.c")
# delete default readme
unlink("bootml/Read-and-delete-me")
# delete default DESCRIPTION FILE
unlink("bootml/DESCRIPTION")
# delete default NAMESPACE FILE
unlink("bootml/NAMESPACE")
unlink("bootml/src/auxiliary.o")
unlink("bootml/src/maxlambda.o")
unlink("bootml/src/fitnoiseF.0")
#unlink("bootml/src/fitnoisewF.0")
# copy package description
file.copy("DESCRIPTION", "bootml/DESCRIPTION")
# copy package description
file.copy("NAMESPACE", "bootml/NAMESPACE")
# sort package .Rd file
unlink("bootml/man/bootml-package.Rd")
#file.copy("rd_file/bootml-package.Rd", "bootml/man/bootml-package.Rd")
# copy data files
#dir.create("bootml/data")
#file.copy("data_files/X", "bootml/data/X")
roxygen2::roxygenise(file.path(getwd(),"/bootml"))
# copy readme file
#file.copy("git_files/README.md", "bootml/README.md")
# other git files
#pause(2)
# .rs.restartR()
# pause(2)
system("R CMD build bootml")
install.packages("bootml_1.0.0.tar.gz", repos = NULL, type = "source")
system("R CMD check --as-cran bootml_1.0.0.tar.gz")
install.packages("V8")
rm(list=ls())
# ------- SET WORKING DIRECTORY ------- #
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(wd)
require(ggplot2)
x <- NULL
#x <- dlstats::cran_stats(c("bootml"))
if (!is.null(x)) {
head(x)
p <- ggplot2::ggplot(x, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))
p <- plotly::ggplotly(p)
p
}
#-------------- package stuff ------#
remove.packages("bootml")
# delete current compiled version
unlink(list.files(pattern = ".tar.gz"))
unlink("bootml.Rcheck", recursive = TRUE)
unlink("bootml", recursive = TRUE)
# delete previous version
unlink(paste0(wd,"/bootml"), recursive = TRUE)
# create skeleton
package.skeleton(name="bootml",
code_files = c("R/factorsparsetest.R","R/fitboot.R","R/fitbootlocal.R",
"R/utilities.R", "R/bootml-package.R"))
unlink("bootml/man", recursive = TRUE)
dir.create("bootml/man")
dir.create("bootml/src")
# copy Fortran files:
file.copy("src/auxiliary.f90", "bootml/src/auxiliary.f90")
file.copy("src/maxlambda.f90", "bootml/src/maxlambda.f90")
file.copy("src/fitnoiseF.f90", "bootml/src/fitnoiseF.f90")
file.copy("src/bootml_init.c", "bootml/src/bootml_init.c")
# delete default readme
unlink("bootml/Read-and-delete-me")
# delete default DESCRIPTION FILE
unlink("bootml/DESCRIPTION")
# delete default NAMESPACE FILE
unlink("bootml/NAMESPACE")
unlink("bootml/src/auxiliary.o")
unlink("bootml/src/maxlambda.o")
unlink("bootml/src/fitnoiseF.0")
#unlink("bootml/src/fitnoisewF.0")
# copy package description
file.copy("DESCRIPTION", "bootml/DESCRIPTION")
# copy package description
file.copy("NAMESPACE", "bootml/NAMESPACE")
# sort package .Rd file
unlink("bootml/man/bootml-package.Rd")
#file.copy("rd_file/bootml-package.Rd", "bootml/man/bootml-package.Rd")
# copy data files
#dir.create("bootml/data")
#file.copy("data_files/X", "bootml/data/X")
roxygen2::roxygenise(file.path(getwd(),"/bootml"))
# copy readme file
#file.copy("git_files/README.md", "bootml/README.md")
# other git files
#pause(2)
# .rs.restartR()
# pause(2)
system("R CMD build bootml")
install.packages("bootml_1.0.0.tar.gz", repos = NULL, type = "source")
system("R CMD check --as-cran bootml_1.0.0.tar.gz")
rm(list=ls())
# ------- SET WORKING DIRECTORY ------- #
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(wd)
require(ggplot2)
x <- NULL
#x <- dlstats::cran_stats(c("FAS"))
if (!is.null(x)) {
head(x)
p <- ggplot2::ggplot(x, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))
p <- plotly::ggplotly(p)
p
}
#-------------- package stuff ------#
remove.packages("FAS")
# delete current compiled version
unlink(list.files(pattern = ".tar.gz"))
unlink("FAS.Rcheck", recursive = TRUE)
unlink("FAS", recursive = TRUE)
# delete previous version
unlink(paste0(wd,"/FAS"), recursive = TRUE)
# create skeleton
package.skeleton(name="FAS",
code_files = c("R/factorsparsetest.R","R/fitboot.R","R/fitbootlocal.R",
"R/utilities.R", "R/FAS-package.R"))
rm(list=ls())
# ------- SET WORKING DIRECTORY ------- #
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(wd)
require(ggplot2)
x <- NULL
#x <- dlstats::cran_stats(c("FAS"))
if (!is.null(x)) {
head(x)
p <- ggplot2::ggplot(x, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))
p <- plotly::ggplotly(p)
p
}
#-------------- package stuff ------#
remove.packages("FAS")
# delete current compiled version
unlink(list.files(pattern = ".tar.gz"))
unlink("FAS.Rcheck", recursive = TRUE)
unlink("FAS", recursive = TRUE)
# delete previous version
unlink(paste0(wd,"/FAS"), recursive = TRUE)
# create skeleton
package.skeleton(name="FAS",
code_files = c("R/factorsparsetest.R","R/fitboot.R","R/fitbootlocal.R",
"R/utilities.R", "R/FAS-package.R"))
unlink("FAS/man", recursive = TRUE)
dir.create("FAS/man")
dir.create("FAS/src")
# copy Fortran files:
file.copy("src/auxiliary.f90", "FAS/src/auxiliary.f90")
file.copy("src/maxlambda.f90", "FAS/src/maxlambda.f90")
file.copy("src/fitnoiseF.f90", "FAS/src/fitnoiseF.f90")
file.copy("src/FAS_init.c", "FAS/src/FAS_init.c")
# delete default readme
unlink("FAS/Read-and-delete-me")
# delete default DESCRIPTION FILE
unlink("FAS/DESCRIPTION")
# delete default NAMESPACE FILE
unlink("FAS/NAMESPACE")
unlink("FAS/src/auxiliary.o")
unlink("FAS/src/maxlambda.o")
unlink("FAS/src/fitnoiseF.0")
#unlink("FAS/src/fitnoisewF.0")
# copy package description
file.copy("DESCRIPTION", "FAS/DESCRIPTION")
# copy package description
file.copy("NAMESPACE", "FAS/NAMESPACE")
# sort package .Rd file
unlink("FAS/man/FAS-package.Rd")
#file.copy("rd_file/FAS-package.Rd", "FAS/man/FAS-package.Rd")
# copy data files
#dir.create("FAS/data")
#file.copy("data_files/X", "FAS/data/X")
roxygen2::roxygenise(file.path(getwd(),"/FAS"))
# copy readme file
#file.copy("git_files/README.md", "FAS/README.md")
# other git files
#pause(2)
# .rs.restartR()
# pause(2)
system("R CMD build FAS")
install.packages("FAS_1.0.0.tar.gz", repos = NULL, type = "source")
system("R CMD check --as-cran FAS_1.0.0.tar.gz")
rm(list=ls())
# ------- SET WORKING DIRECTORY ------- #
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(wd)
require(ggplot2)
x <- NULL
#x <- dlstats::cran_stats(c("FAS"))
if (!is.null(x)) {
head(x)
p <- ggplot2::ggplot(x, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))
p <- plotly::ggplotly(p)
p
}
#-------------- package stuff ------#
remove.packages("FAS")
# delete current compiled version
unlink(list.files(pattern = ".tar.gz"))
unlink("FAS.Rcheck", recursive = TRUE)
unlink("FAS", recursive = TRUE)
# delete previous version
unlink(paste0(wd,"/FAS"), recursive = TRUE)
# create skeleton
package.skeleton(name="FAS",
code_files = c("R/factorsparsetest.R","R/fitboot.R","R/fitbootlocal.R",
"R/utilities.R", "R/FAS-package.R"))
unlink("FAS/man", recursive = TRUE)
dir.create("FAS/man")
dir.create("FAS/src")
# copy Fortran files:
file.copy("src/auxiliary.f90", "FAS/src/auxiliary.f90")
file.copy("src/maxlambda.f90", "FAS/src/maxlambda.f90")
file.copy("src/fitnoiseF.f90", "FAS/src/fitnoiseF.f90")
file.copy("src/FAS_init.c", "FAS/src/FAS_init.c")
# delete default readme
unlink("FAS/Read-and-delete-me")
# delete default DESCRIPTION FILE
unlink("FAS/DESCRIPTION")
# delete default NAMESPACE FILE
unlink("FAS/NAMESPACE")
unlink("FAS/src/auxiliary.o")
unlink("FAS/src/maxlambda.o")
unlink("FAS/src/fitnoiseF.0")
#unlink("FAS/src/fitnoisewF.0")
# copy package description
file.copy("DESCRIPTION", "FAS/DESCRIPTION")
# copy package description
file.copy("NAMESPACE", "FAS/NAMESPACE")
# sort package .Rd file
unlink("FAS/man/FAS-package.Rd")
#file.copy("rd_file/FAS-package.Rd", "FAS/man/FAS-package.Rd")
# copy data files
#dir.create("FAS/data")
#file.copy("data_files/X", "FAS/data/X")
roxygen2::roxygenise(file.path(getwd(),"/FAS"))
# copy readme file
#file.copy("git_files/README.md", "FAS/README.md")
# other git files
#pause(2)
# .rs.restartR()
# pause(2)
system("R CMD build FAS")
install.packages("FAS_1.0.0.tar.gz", repos = NULL, type = "source")
system("R CMD check --as-cran FAS_1.0.0.tar.gz")
